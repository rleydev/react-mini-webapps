{"ast":null,"code":"var _jsxFileName = \"/Users/arleymi/Desktop/Frontend projects/meme-generator-mini-app/src/compoments/Meme.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Meme() {\n  _s();\n  const [meme, setMeme] = React.useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"http://i.imgflip.com/1bij.jpg\"\n  });\n  const [allMemeImages, setAllMemeImages] = React.useState([]);\n  function getMemeImage() {\n    const randomNumber = Math.floor(Math.random() * allMemeImages.length);\n    const url = allMemeImages[randomNumber].url;\n    setMeme(prevMeme => ({\n      ...prevMeme,\n      randomImage: url\n    }));\n  }\n  function handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setMeme(prevMeme => ({\n      ...prevMeme,\n      [name]: value\n    }));\n  }\n  React.useEffect(async () => {\n    async function getMemes() {\n      const res = await fetch(\"https://api.imgflip.com/get_memes\");\n      const data = await res.json();\n      setAllMemeImages(data.data.meme);\n    }\n    get;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form--inputs\",\n        type: \"text\",\n        placeholder: \"Top text\",\n        name: \"topText\",\n        value: meme.topText,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form--inputs\",\n        type: \"text\",\n        placeholder: \"Bottom text\",\n        name: \"bottomText\",\n        value: meme.bottomText,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"form--button\",\n        onClick: getMemeImage,\n        children: \"Get a new meme image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: meme.randomImage,\n        className: \"meme--image\",\n        alt: \"memeImage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text top\",\n        children: meme.topText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text bottom\",\n        children: meme.bottomText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n_s(Meme, \"RFCNdC+JPOWM9pUJGSXXWVo0IYI=\");\n_c = Meme;\nvar _c;\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"names":["React","Meme","meme","setMeme","useState","topText","bottomText","randomImage","allMemeImages","setAllMemeImages","getMemeImage","randomNumber","Math","floor","random","length","url","prevMeme","handleChange","event","name","value","target","useEffect","getMemes","res","fetch","data","json","get"],"sources":["/Users/arleymi/Desktop/Frontend projects/meme-generator-mini-app/src/compoments/Meme.js"],"sourcesContent":["import React from \"react\";\n\nexport default function Meme() {\n\n    const [meme, setMeme] = React.useState({\n        topText: \"\",\n        bottomText: \"\",\n        randomImage: \"http://i.imgflip.com/1bij.jpg\"\n    })\n\n    const [allMemeImages, setAllMemeImages] = React.useState([])\n\n    function getMemeImage() {\n        const randomNumber = Math.floor(Math.random() * allMemeImages.length)\n        const url = allMemeImages[randomNumber].url\n        setMeme(prevMeme => ({\n            ...prevMeme,\n            randomImage: url\n        }))\n    }\n\n    function handleChange(event) {\n        const {name, value} = event.target\n        setMeme(prevMeme => ({\n            ...prevMeme,\n            [name]: value\n        }))\n    }\n\n    React.useEffect(async () => {\n        async function getMemes() {\n            const res = await fetch(\"https://api.imgflip.com/get_memes\")\n        const data = await res.json()\n        setAllMemeImages(data.data.meme)\n        }\n\n        get\n    }, [])\n\n    return (\n        <main>\n            <div className=\"form\">\n                <input \n                    className=\"form--inputs\" \n                    type=\"text\" \n                    placeholder=\"Top text\"\n                    name=\"topText\"\n                    value={meme.topText}\n                    onChange={handleChange}\n                />\n                <input \n                    className=\"form--inputs\" \n                    type=\"text\" \n                    placeholder=\"Bottom text\"\n                    name=\"bottomText\"\n                    value={meme.bottomText}\n                    onChange={handleChange}\n                    />\n                <button className=\"form--button\" onClick={getMemeImage}>Get a new meme image</button>\n            </div>\n            <div className=\"meme\">\n                <img src={meme.randomImage} className=\"meme--image\" alt=\"memeImage\" />\n                <h2 className=\"meme--text top\">{meme.topText}</h2>\n                <h2 className=\"meme--text bottom\">{meme.bottomText}</h2>\n            </div>\n           \n        </main> \n    )\n}"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC;AAE1B,eAAe,SAASC,IAAI,GAAG;EAAA;EAE3B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGH,KAAK,CAACI,QAAQ,CAAC;IACnCC,OAAO,EAAE,EAAE;IACXC,UAAU,EAAE,EAAE;IACdC,WAAW,EAAE;EACjB,CAAC,CAAC;EAEF,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,KAAK,CAACI,QAAQ,CAAC,EAAE,CAAC;EAE5D,SAASM,YAAY,GAAG;IACpB,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGN,aAAa,CAACO,MAAM,CAAC;IACrE,MAAMC,GAAG,GAAGR,aAAa,CAACG,YAAY,CAAC,CAACK,GAAG;IAC3Cb,OAAO,CAACc,QAAQ,KAAK;MACjB,GAAGA,QAAQ;MACXV,WAAW,EAAES;IACjB,CAAC,CAAC,CAAC;EACP;EAEA,SAASE,YAAY,CAACC,KAAK,EAAE;IACzB,MAAM;MAACC,IAAI;MAAEC;IAAK,CAAC,GAAGF,KAAK,CAACG,MAAM;IAClCnB,OAAO,CAACc,QAAQ,KAAK;MACjB,GAAGA,QAAQ;MACX,CAACG,IAAI,GAAGC;IACZ,CAAC,CAAC,CAAC;EACP;EAEArB,KAAK,CAACuB,SAAS,CAAC,YAAY;IACxB,eAAeC,QAAQ,GAAG;MACtB,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,mCAAmC,CAAC;MAChE,MAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,EAAE;MAC7BnB,gBAAgB,CAACkB,IAAI,CAACA,IAAI,CAACzB,IAAI,CAAC;IAChC;IAEA2B,GAAG;EACP,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI;IAAA,wBACI;MAAK,SAAS,EAAC,MAAM;MAAA,wBACjB;QACI,SAAS,EAAC,cAAc;QACxB,IAAI,EAAC,MAAM;QACX,WAAW,EAAC,UAAU;QACtB,IAAI,EAAC,SAAS;QACd,KAAK,EAAE3B,IAAI,CAACG,OAAQ;QACpB,QAAQ,EAAEa;MAAa;QAAA;QAAA;QAAA;MAAA,QACzB,eACF;QACI,SAAS,EAAC,cAAc;QACxB,IAAI,EAAC,MAAM;QACX,WAAW,EAAC,aAAa;QACzB,IAAI,EAAC,YAAY;QACjB,KAAK,EAAEhB,IAAI,CAACI,UAAW;QACvB,QAAQ,EAAEY;MAAa;QAAA;QAAA;QAAA;MAAA,QACrB,eACN;QAAQ,SAAS,EAAC,cAAc;QAAC,OAAO,EAAER,YAAa;QAAA,UAAC;MAAoB;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QACnF,eACN;MAAK,SAAS,EAAC,MAAM;MAAA,wBACjB;QAAK,GAAG,EAAER,IAAI,CAACK,WAAY;QAAC,SAAS,EAAC,aAAa;QAAC,GAAG,EAAC;MAAW;QAAA;QAAA;QAAA;MAAA,QAAG,eACtE;QAAI,SAAS,EAAC,gBAAgB;QAAA,UAAEL,IAAI,CAACG;MAAO;QAAA;QAAA;QAAA;MAAA,QAAM,eAClD;QAAI,SAAS,EAAC,mBAAmB;QAAA,UAAEH,IAAI,CAACI;MAAU;QAAA;QAAA;QAAA;MAAA,QAAM;IAAA;MAAA;MAAA;MAAA;IAAA,QACtD;EAAA;IAAA;IAAA;IAAA;EAAA,QAEH;AAEf;AAAC,GAlEuBL,IAAI;AAAA,KAAJA,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/arleymi/Desktop/Frontend projects/meme-generator-mini-app/src/compoments/Meme.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport memesData from '../memesData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Meme() {\n  _s();\n  // const [memeImage, setMemeImage] = React.useState(\"http://i.imgflip.com/1bij.jpg\")\n\n  const [meme, setMeme] = React.useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"http://i.imgflip.com/1bij.jpg\"\n  });\n  const [allMemeImages, setAllMemeImages] = React.useState(memesData);\n  function getMemeImage() {\n    const memesArray = allMemeImages.data.memes;\n    const randomNumber = Math.floor(Math.random() * memesArray.length);\n    const url = setMeme(memesArray[randomNumber].url);\n    setMeme(prevMeme => ({\n      ...prevMeme,\n      randomImage: url\n    }));\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form--inputs\",\n        type: \"text\",\n        placeholder: \"Top text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form--inputs\",\n        type: \"text\",\n        placeholder: \"Bottom text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"form--button\",\n        onClick: getMemeImage,\n        children: \"Get a new meme image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: meme.randomImage,\n      className: \"meme--image\",\n      alt: \"memeImage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n_s(Meme, \"5UBB9YRk0/Y87S9l2uP7qfvk9+M=\");\n_c = Meme;\nvar _c;\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"names":["React","memesData","Meme","meme","setMeme","useState","topText","bottomText","randomImage","allMemeImages","setAllMemeImages","getMemeImage","memesArray","data","memes","randomNumber","Math","floor","random","length","url","prevMeme"],"sources":["/Users/arleymi/Desktop/Frontend projects/meme-generator-mini-app/src/compoments/Meme.js"],"sourcesContent":["import React from \"react\";\nimport memesData from '../memesData';\n\nexport default function Meme() {\n\n    // const [memeImage, setMemeImage] = React.useState(\"http://i.imgflip.com/1bij.jpg\")\n\n    const [meme, setMeme] = React.useState({\n        topText: \"\",\n        bottomText: \"\",\n        randomImage: \"http://i.imgflip.com/1bij.jpg\"\n    })\n\n    const [allMemeImages, setAllMemeImages] = React.useState(memesData)\n\n    function getMemeImage() {\n        const memesArray = allMemeImages.data.memes\n        const randomNumber = Math.floor(Math.random() * memesArray.length)\n        const url = setMeme(memesArray[randomNumber].url)\n        setMeme(prevMeme => ({\n            ...prevMeme, \n            randomImage: url\n        }))\n    }\n\n    return (\n        <main>\n            <div className=\"form\">\n                <input className=\"form--inputs\" type=\"text\" placeholder=\"Top text\"/>\n                <input className=\"form--inputs\" type=\"text\" placeholder=\"Bottom text\"/>\n                <button className=\"form--button\" onClick={getMemeImage}>Get a new meme image</button>\n            </div>\n            <img src={meme.randomImage} className=\"meme--image\" alt=\"memeImage\" />\n        </main> \n    )\n}"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,cAAc;AAAC;AAErC,eAAe,SAASC,IAAI,GAAG;EAAA;EAE3B;;EAEA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGJ,KAAK,CAACK,QAAQ,CAAC;IACnCC,OAAO,EAAE,EAAE;IACXC,UAAU,EAAE,EAAE;IACdC,WAAW,EAAE;EACjB,CAAC,CAAC;EAEF,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,KAAK,CAACK,QAAQ,CAACJ,SAAS,CAAC;EAEnE,SAASU,YAAY,GAAG;IACpB,MAAMC,UAAU,GAAGH,aAAa,CAACI,IAAI,CAACC,KAAK;IAC3C,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGN,UAAU,CAACO,MAAM,CAAC;IAClE,MAAMC,GAAG,GAAGhB,OAAO,CAACQ,UAAU,CAACG,YAAY,CAAC,CAACK,GAAG,CAAC;IACjDhB,OAAO,CAACiB,QAAQ,KAAK;MACjB,GAAGA,QAAQ;MACXb,WAAW,EAAEY;IACjB,CAAC,CAAC,CAAC;EACP;EAEA,oBACI;IAAA,wBACI;MAAK,SAAS,EAAC,MAAM;MAAA,wBACjB;QAAO,SAAS,EAAC,cAAc;QAAC,IAAI,EAAC,MAAM;QAAC,WAAW,EAAC;MAAU;QAAA;QAAA;QAAA;MAAA,QAAE,eACpE;QAAO,SAAS,EAAC,cAAc;QAAC,IAAI,EAAC,MAAM;QAAC,WAAW,EAAC;MAAa;QAAA;QAAA;QAAA;MAAA,QAAE,eACvE;QAAQ,SAAS,EAAC,cAAc;QAAC,OAAO,EAAET,YAAa;QAAA,UAAC;MAAoB;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QACnF,eACN;MAAK,GAAG,EAAER,IAAI,CAACK,WAAY;MAAC,SAAS,EAAC,aAAa;MAAC,GAAG,EAAC;IAAW;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QACnE;AAEf;AAAC,GAhCuBN,IAAI;AAAA,KAAJA,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}